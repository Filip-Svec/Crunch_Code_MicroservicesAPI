volumes:
  mongodbdata:
  seqdata:

services:
  mongo:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017" 
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodbdata:/data/db    # Persist data
  
  microservicesapi.python:
    image: microservicesapi.python    # Image that's going to be built from the build context
    build:                            # Build instructions for creating image   
      context: .                      # Use current dir as context
      dockerfile: MicroservicesAPI.Python/Dockerfile    # Path to dockerfile relative to context
    environment:                      # Environment variables available in container, configure services
      - MongoDbSettings__ConnectionString=mongodb://root:example@mongo:27017
      - MongoDbSettings__DatabaseName=MicroservicesAPI
      - ASPNETCORE_URLS=http://+:80
    depends_on:         # Services that need to be up n running before this service starts 
      - mongo

  microservicesapi.apigateway:
    image: microservicesapi.apigateway
    build:
      context: .
      dockerfile: MicroservicesAPI.ApiGateway/Dockerfile
    ports:
      - "7000:80" # Map container's port 80 to host's port 7000
    depends_on:
      - microservicesapi.python
      - microservicesapi.taskprovider
    environment:
      - ASPNETCORE_URLS=http://+:80

  microservicesapi.taskprovider:
    image: microservicesapi.taskprovider
    build:
      context: .
      dockerfile: MicroservicesAPI.TaskProvider/Dockerfile
    environment:
      - MongoDbSettings__ConnectionString=mongodb://root:example@mongo:27017
      - MongoDbSettings__DatabaseName=MicroservicesAPI
      - ASPNETCORE_URLS=http://+:80
    depends_on:
      - mongo
    
  seq:
    restart: unless-stopped
    container_name: seq
    image: microservicesapi.seq
    build:
      context: .
      dockerfile: seq/Dockerfile
    environment:
      - ACCEPT_EULA=Y
    expose:
      - 5341
    ports:
      - 45005:80
    volumes:
      - seqdata:/data
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:80/health || exit 1" ]
      interval: 5s
      timeout: 10s
      start_period: 10s
      retries: 10
  
